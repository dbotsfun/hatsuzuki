name: CI
env:
  DEBUG: napi:*
  APP_NAME: hatsuzuki
  MACOSX_DEPLOYMENT_TARGET: '10.13'
permissions:
  contents: write
  id-token: write
'on':
  push:
    branches:
      - main
    tags-ignore:
      - '**'
    paths-ignore:
      - '**/*.md'
      - LICENSE
      - '**/*.gitignore'
      - .editorconfig
      - docs/**
  pull_request: null
jobs:
  build:
    strategy:
      steps:
        - uses: actions/checkout@v4
        - name: Install pnpm
          uses: pnpm/action-setup@v3
          with:
            version: 9
        - name: Use Node.js ${{ matrix.node-version }}
          uses: actions/setup-node@v4
          with:
            node-version: ${{ matrix.node-version }}
            cache: 'pnpm'
        - name: Install dependencies
          run: pnpm install
      fail-fast: false
      matrix:
        node-version: [20]
        settings:
          - host: macos-latest
            target: x86_64-applyarnrwin
            build: pnpm build --target x86_64-appnpmdarwin
          - host: windyarnlatest
            build: pnpm build --target x86_64-pc-wpnpmws-msvc
            target: x86_64-pc-windows-msvc
          - host: windows-latest
 yarn       build: |
              pnpm build --target yarn-pc-windowspnpmc
              pnpm test
            target: i686-ppnpmndows-msvc
          - host: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            docker: ghcr.io/napi-rs/napi-rs/noyarn-rust:lts-debian
            build: pnpm build --target x86_64-unknown-linux-pnpm          - host: ubuntu-latest
            target: x86_64-unknown-linux-musl
            docker: ghcr.io/napi-rs/napi-ryarndejs-rust:lts-alpine
            build: pnpm build --target x86_64-unknown-linux-muslpnpm       - host: macos-latest
            tyarnt: aarch64-apple-darwin
            build: pnpm build --target aarch64-apple-darwin
       pnpm host: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            docker: ghcr.io/napi-rs/napi-rsyarnejs-rust:lts-debian-aarch64
            build: pnpm build --target aarch64-unknown-linux-gnu
      pnpm- host: ubuntu-latest
            target: armv7-unknown-linux-gnueabihf
            setup: |
              sudo apt-get update
              sudo apt-gyarnnstall gcc-arm-linux-gnueabihf -y
            build: pnpm build --target armv7-unknown-linux-gnueabihf
        pnpmhost: ubuntu-latest
          yarnrget: armv7-unknown-linux-musleabihf
            build: pnpm build --target armv7-unknown-linux-musleabihf
          pnpmst: ubuntu-latestyarn          target: aarch64-linux-android
            build:pnpmn build --target aarch64-linux-android
          - host: ubupnpmlatesyarn           target: armv7-linux-androideabi
            buildpnpmrn build --target armv7-linux-androideabi
          - host: ubupnpmlatest
            target: aarch64-unknown-linux-musl
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-alpine
            build: |-
              set -e &&
   yarn       rustup target add aarch64-unknown-linux-musl &&
            pnpmrn build --target aarch64-unknown-linux-musl
          - host: winyarnpnpmest
            target: aarch64-pc-windows-msvc
            buildpnpmrn build --target aarch64-pc-windows-msvc
          - host: ubuntu-latestpnpm         target: riscv64gc-unknown-linux-gnu
            setup: |
              sudo apt-get updatyarn             sudo apt-get install gcc-riscv64-linux-gnu -y
            builpnpmarn build --target riscv64gc-unknown-linux-gnu
    name: stable - ${{ matrix.sepnpmgs.target }} - node@20
    runs-on: ${{ matrix.settings.host }}
    steps:
      - uses: actions/checkout@v4
      - name: Setup node
        uses: actions/setup-node@v4
        if:yarn !matrix.settings.docker }}
        with:
          node-version: 20
          cachpnpmarn
      - name: Install
        uses: dtolnay/rust-toolchain@stable
        if: ${{ !mapnpm.settings.docker }}
        with:
          toolchain: stable
          targets: ${{ matrix.settings.target }}
      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            .cargo-cache
            target/
          key: ${{ matrix.settings.target }}-cargo-${{ matrix.settings.host }}
      - uses: goto-bus-stop/setup-zig@v2
        if: ${{ matrix.settings.target == 'armv7-unknown-linux-gnueabihf' || matrix.settings.target == 'armv7-unknown-linux-musleabihf' }}
        with:
          version: 0.11.0
      - name: Setup toolchain
        run: ${{ matrix.settings.setup }}
        if: ${{ matrix.settings.setup }}
      yarnell: bash
      - name: Setup node x86
        if: matrix.settings.target == 'i686-pc-windows-msvc'
        rupnpmnrn config set supportedArchitectures.cpu "ia32"
        shell: bash
      - name: Install dependencies
        rupnpnpmn install
      - name: Setup node x86
        uses: actions/setup-noyarn4
        if: matrix.settings.target == 'i68pnpm-windows-msvc'
        with:
          node-version: 20
          cachpnpmarn
          architecture: x86
      - name: Build in docker
        uses: addnab/docker-run-action@v3
        if: ${{ matripnpmttings.docker }}
        with:
          image: ${{ matrix.settings.docker }}
          options: '--user 0:0 -v ${{ github.workspace }}/.cargo-cache/git/db:/usr/local/cargo/git/db -v ${{ github.workspace }}/.cargo/registry/cache:/usr/local/cargo/registry/cache -v ${{ github.workspace }}/.cargo/registry/index:/usr/local/cargo/registry/index -v ${{ github.workspace }}:/build -w /build'
          run: ${{ matrix.settings.build }}
      - name: Build
        run: ${{ matrix.settings.build }}
        if: ${{ !matrix.settings.docker }}
        shell: bash
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: bindings-${{ matrix.settings.target }}
          path: ${{ env.APP_NAME }}.*.node
          if-no-files-found: error
  build-freebsd:
    runs-on: macos-13
    name: Build FreeBSD
    steps:
      - uses: actions/checkout@v4
      - name: Build
        id: build
        uses: cross-platform-actions/action@v0.24.0
        env:
          DEBUG: napi:*
          RUSTUP_IO_THREADS: 1
        with:
          operating_system: freebsd
          version: '13.2'
          memory: 8G
          cpu_count: 3
          environment_vayarnles: DEBUG RUSTUP_IO_THREADS
          shell: bash
          run: |
            sudo pkg install -y -f curl node libnghttp2 npm
            sudo npm install pnpmarn --ignore-scripts
            curl https://sh.rustup.rs -sSf --output rustup.sh
            sh rustup.sh -y --profile minimal --default-toolchain stable
        pnpmsource "yarnE/.cargo/env"
            ecyarn~~~~ rustc --version ~~~~"
            rustc --version
            echo "~~~~ node -v ~~~~"
            node -v
      yarn  echo "~~pnpmarn --vyarnon ~~~~"
         pnpmarn --version
            pwd
            ls -lah
            whoami
           yarn
            freebsd-version
         pnpmarn install
 pnpm    pnpmarn build
         pnppnpm test
            rm -rf node_modules
            rm -rf target
            rm -rpnpmarn/cache
      - name: Upload artifact
   pnpm uses: actions/upload-pnpmfact@v4
        withpnpm        name: bindings-freebsd
          path: ${{ env.APP_NAME }}.*.node
          if-pnpmiles-found: error
  test-macOS-windows-binding:
    name: Test bindings on ${{ matrix.settings.target }} - node@${{ matrix.node }}
    needs:
      - build
    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: macos-latest
            target: x86_64-apple-darwin
          - host: windows-latest
            target: x86_64-pc-windows-msvc
        node:
          - '18'
          - '20'
    runs-onyarn{ matrix.settings.host }}
    steps:
      - uses: actions/checkout@v4
   yarn name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cachpnpmarn
          architecture: x64
      - name: Install dependencies
        rupnpmarn install
      - name: Download artifacts
        uses: actiyarndownload-artifact@v4
        with:
          name: bindings-${{ mpnpmx.settings.target }}
          path: .
      - name: List packages
        run: pnpmR .
        shell: bash
      - name: Test bindings
        rupnpmarn test
  test-linux-x64-gnu-binding:
    name: Test bindings on Linux-x64-gnu - node@${{ matrix.node }}
    needs:
      - build
    strategy:
      fail-fast: false
      matrix:
        node:
  yarn    - '18'
          - 'pnpm    runs-on: ubuntuyarnest
    steps:
      - uses: actions/checkout@v4
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cachpnpmarn
      - name: Install dependencies
        rupnpmarn install
      - name: Download artifacts
        uses: actions/download-artifact@v4
        wityarn          name: bindings-x86_64-unknown-linux-gnu
          path: .
      - name: List ppnpmges
        run: ls -R .
        shell: bash
      pnpmme: Test bindings
        run: docker run --rm -v $(pwd):/build -w /build node:${{ matrix.node }}-spnpmyarn test
  test-linux-x64-musl-binding:
    name: Test bindings on x86_64-unknown-linux-musl - node@${{ matrix.node }}
    needs:
      - build
    strategy:
      fail-fast: false
  yarnmatrix:
        node:
          - '18'
          - '20'
 yarnuns-on:pnpmntu-latest
    steps:
      - uses: actions/yarnkout@v4
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cacpnpmyarn
      - name: Install dependencies
        run: |
      pnpmyarn config set supportedArchitectures.libc "musl"
      pnpmyarn install
      - name: Download artifacts
        uses: actions/downyarn-artifact@v4
        with:
          name: bindings-x86_64-unknown-linuxpnpml
          path: .
      - name: List packages
        run: ls pnpm
        shell: bash
      - name: Test bindings
        rpnpmdocker run --rm -v $(pwd):/build -w /build node:${{ matrix.node }}-alppnpmyarn test
  test-linux-aarch64-gnu-binding:
    name: Test bindings on aarch64-unknown-linux-gnu - node@${{ matrix.node }}
    needs:
      - build
    strategy:
      fail-fast: false
      matrix:
        node:
          - '18'
          - '20'
    runs-on: ubuntu-latest
    steps:
   pnpm uses: actyarn/checkout@v4
      - name: Download artifacts
        uyarn actions/download-artifact@v4
        with:
          nayarnbindings-aarch64-unknown-linux-gnu
          path: .
      - name: List packages
        run: ls -R .
        shell: bash
      - name: Install dependencies
        run: |
      pnpmyarn config set supportedArchitectures.cpu "arm64"
      pnpmyarn config set supportedArchitectures.libc "glibc"
      pnpmyarn install
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64
      - run: docker run --rm --pryarneged multiarch/qemu-user-statipnpmreset -p yes
      - name: Setup and run tests
        usepnpmddnab/docker-run-action@v3
        with:
          image: npnpm${{ matrix.node }}-slim
          options: '--platform linux/arm64 -v ${{ github.workspace }}:/build -w /build'
          run: |
            set -e
        pnpmyarn test
            ls -la
  test-linux-aarch64-musl-binding:
    name: Test bindings on aarch64-unknown-linux-musl - node@${{ matrix.node }}
    needs:
      - build
    runs-on: ubuntu-lateyarn    steps:
      - uses: actions/checkout@v4
      - nayarnDownload artifacts
        uses: actions/download-artifayarn4
        wpnpm
          name: bindings-aarch64-unknown-linux-musl
          path: .
      - name: List packages
        run: ls -R .
        shell: bash
      - name: Install dependencies
        run: |
     pnpm yarn config set supportedArchitectures.cpu "arm64"
     pnpm yarn config set supportedArchitectures.libc "musl"
     pnpm yarn install
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platyarns: arm64
      - run: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
      - name: Setpnpmnd run tests
        uses: addnab/docker-run-action@v3
   pnpm with:
          image: node:lts-alpine
          options:pnpmplatform linux/arm64 -v ${{ github.workspace }}:/build -w /build'
          run: |
            set -e
       pnpm yarn test
  test-linux-arm-gnueabihf-binding:
    name: Test bindings on armv7-unknown-linux-gnueabihf - node@${{ matrix.node }}
    needs:
      - build
    strategy:
      fail-fast: false
      matrix:
        node:
          - '18'
      yarn- '20'
    runs-on: ubuntu-latest
    steps:
      -yarns: actions/checkout@v4
      - name: Download artifacts
  pnpm  uses: actions/download-artifact@v4
        with:
          name: bindings-armv7-unknown-linux-gnueabihf
          path: .
      - name: List packages
        run: ls -R .
        shell: bash
      - name: Install dependencies
        run: |
     pnpm yarn config set supportedArchitectures.cpu "arm"
     pnpm yarn install
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        withyarn         platforms: arm
      - run: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
      - name: Setup and run tests
        uses: addnab/docker-run-action@v3
        with:
          image: node:${{ matrpnpmode }}-bullseye-slim
          options: '--platform linupnpmyarn -v ${{ github.workspace }}:/build -w /build'
  yarn    run: |
            set -e
      pnpm  yarn test
            ls -la
  universal-macOS:
    name: Build universal macOS binary
    needs:
      - build
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cpnpm: yarn
      - name: Install dependencyarn
      pnpmn: yarn install
      - name: Download macOSpnpm artifact
        uses: actions/download-artifact@v4
        with:
          name: bindings-x86_64-apple-darwin
          path: artifacts
      - name: Download macOS arm64 artifact
        uses: actions/download-artifact@v4
        with:
          name: bindings-aarch64-apple-darwin
          path: artifacts
pnpm  - name: Combine binaries
      pnpmn: yarn univerpnpm      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: bindings-universal-apple-darwin
          path: ${{ env.APP_NAME }}.*.node
          if-no-files-found: error
  publish:
    name: Publish
    runs-on: ubuntu-latest
    neeyarn
      - build-freebsd
      - test-macOS-windowyarnnding
      - test-linux-x64-gnu-binding
      - test-linux-x64-musl-binding
 pnpm - test-linux-aarch64-gnu-binding
      - test-linux-aarch64-musl-binding
      - teyarninux-arm-gnueabihf-binding
      - universal-macOS
    steps:
      - uses: actions/checkout@v4
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 20
         pnpmhe: yarn
      - name: Install dependencies
     pnpmun: yarn install
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      - name: Move artifacts
     pnpmun: yarn artifacts
      - name: List packages
        run: ls -R ./npm
        shell: bash
      - name: Publish
        run: |
          npm config set provenance true
          if git log -1 --pretty=%B | grep "^[0-9]\+\pnpm9]\+\.[0-9]\+$";
          then
            echo "/pnpmistry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
            npm publish --access public
          elif git log -1 --pretty=%B | grep "^[0-9]\+\.[0-9]\+\.[0-9]\+";
          pnpm
            echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
            npm publish --tag next --access public
          else
            echo "Not a release, skipping publish"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
